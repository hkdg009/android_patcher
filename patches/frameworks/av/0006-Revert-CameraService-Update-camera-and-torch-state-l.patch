From 2da28109dc5296ac71a9fed549b592a5d85990dc Mon Sep 17 00:00:00 2001
From: Artem Borisov <dedsa2002@gmail.com>
Date: Mon, 13 Aug 2018 00:09:31 +0300
Subject: [PATCH 6/7] Revert "CameraService: Update camera and torch state
 lists also at runtime"

This reverts commit 151e3be07d27883ee590a4c4765077ffea16c954.

Change-Id: If6fda68ea778a7c9568f0ad4a37e7235e006ecd3
---
 services/camera/libcameraservice/CameraService.cpp | 73 +++++++---------------
 services/camera/libcameraservice/CameraService.h   |  4 --
 2 files changed, 23 insertions(+), 54 deletions(-)

diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index c88e578..f9dcf93 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -254,10 +254,29 @@ status_t CameraService::enumerateProviders() {
         }
 
         if (!cameraFound) {
-            addStates(id8);
+            hardware::camera::common::V1_0::CameraResourceCost cost;
+            res = mCameraProviderManager->getResourceCost(cameraId, &cost);
+            if (res != OK) {
+                ALOGE("Failed to query device resource cost: %s (%d)", strerror(-res), res);
+                continue;
+            }
+            std::set<String8> conflicting;
+            for (size_t i = 0; i < cost.conflictingDevices.size(); i++) {
+                conflicting.emplace(String8(cost.conflictingDevices[i].c_str()));
+            }
+
+            {
+                Mutex::Autolock lock(mCameraStatesLock);
+                mCameraStates.emplace(id8,
+                    std::make_shared<CameraState>(id8, cost.resourceCost, conflicting));
+            }
         }
 
         onDeviceStatusChanged(id8, CameraDeviceStatus::PRESENT);
+
+        if (mFlashlight->hasFlashUnit(id8)) {
+            mTorchStatusMap.add(id8, TorchModeStatus::AVAILABLE_OFF);
+        }
     }
 
     return OK;
@@ -293,44 +312,6 @@ void CameraService::onNewProviderRegistered() {
     enumerateProviders();
 }
 
-void CameraService::addStates(const String8 id) {
-    std::string cameraId(id.c_str());
-    hardware::camera::common::V1_0::CameraResourceCost cost;
-    status_t res = mCameraProviderManager->getResourceCost(cameraId, &cost);
-    if (res != OK) {
-        ALOGE("Failed to query device resource cost: %s (%d)", strerror(-res), res);
-        return;
-    }
-    std::set<String8> conflicting;
-    for (size_t i = 0; i < cost.conflictingDevices.size(); i++) {
-        conflicting.emplace(String8(cost.conflictingDevices[i].c_str()));
-    }
-
-    {
-        Mutex::Autolock lock(mCameraStatesLock);
-        mCameraStates.emplace(id, std::make_shared<CameraState>(id, cost.resourceCost,
-                                                                conflicting));
-    }
-
-    if (mFlashlight->hasFlashUnit(id)) {
-        Mutex::Autolock al(mTorchStatusMutex);
-        mTorchStatusMap.add(id, TorchModeStatus::AVAILABLE_OFF);
-    }
-    logDeviceAdded(id, "Device added");
-}
-
-void CameraService::removeStates(const String8 id) {
-    if (mFlashlight->hasFlashUnit(id)) {
-        Mutex::Autolock al(mTorchStatusMutex);
-        mTorchStatusMap.removeItem(id);
-    }
-
-    {
-        Mutex::Autolock lock(mCameraStatesLock);
-        mCameraStates.erase(id);
-    }
-}
-
 void CameraService::onDeviceStatusChanged(const String8& id,
         CameraDeviceStatus newHalStatus) {
     ALOGI("%s: Status changed for cameraId=%s, newStatus=%d", __FUNCTION__,
@@ -342,13 +323,8 @@ void CameraService::onDeviceStatusChanged(const String8& id,
 
     if (state == nullptr) {
         if (newStatus == StatusInternal::PRESENT) {
-            ALOGI("%s: Unknown camera ID %s, a new camera is added",
+            ALOGW("%s: Unknown camera ID %s, probably newly registered?",
                     __FUNCTION__, id.string());
-
-            // First add as absent to make sure clients are notified below
-            addStates(id);
-
-            updateStatus(newStatus, id);
         } else {
             ALOGE("%s: Bad camera ID %s", __FUNCTION__, id.string());
         }
@@ -2313,11 +2289,8 @@ status_t CameraService::BasicClient::finishCameraOps() {
                 mClientPackageName);
         mOpsActive = false;
 
-        // This function is called when a client disconnects. This should
-        // release the camera, but actually only if it was in a proper
-        // functional state, i.e. with status NOT_AVAILABLE
         std::initializer_list<StatusInternal> rejected = {StatusInternal::PRESENT,
-                StatusInternal::ENUMERATING, StatusInternal::NOT_PRESENT};
+                StatusInternal::ENUMERATING};
 
         // Transition to PRESENT if the camera is not in either of the rejected states
         sCameraService->updateStatus(StatusInternal::PRESENT,
@@ -2568,7 +2541,7 @@ void CameraService::UidPolicy::updateOverrideUid(uid_t uid, String16 callingPack
 
 CameraService::CameraState::CameraState(const String8& id, int cost,
         const std::set<String8>& conflicting) : mId(id),
-        mStatus(StatusInternal::NOT_PRESENT), mCost(cost), mConflicting(conflicting) {}
+        mStatus(StatusInternal::PRESENT), mCost(cost), mConflicting(conflicting) {}
 
 CameraService::CameraState::~CameraState() {}
 
diff --git a/services/camera/libcameraservice/CameraService.h b/services/camera/libcameraservice/CameraService.h
index 6909a95..6724c49 100644
--- a/services/camera/libcameraservice/CameraService.h
+++ b/services/camera/libcameraservice/CameraService.h
@@ -555,10 +555,6 @@ private:
     // Eumerate all camera providers in the system
     status_t enumerateProviders();
 
-    // Add a new camera to camera and torch state lists or remove an unplugged one
-    void addStates(const String8 id);
-    void removeStates(const String8 id);
-
     // Check if we can connect, before we acquire the service lock.
     // The returned originalClientPid is the PID of the original process that wants to connect to
     // camera.
-- 
2.7.4

